<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        cgAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Ahmed</value>
  </data>
</root>